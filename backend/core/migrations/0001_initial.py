# Generated by Django 2.2.1 on 2019-09-23 11:22

import _socket
from decimal import Decimal
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions
import django.utils.timezone
import django_audit_fields.fields.hostname_modification_field
import django_audit_fields.fields.userfield
import django_audit_fields.models.audit_model_mixin
import django_revision.revision_field
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'bruger',
                'verbose_name_plural': 'brugere',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ActivityDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Navn')),
                ('activity_id', models.CharField(max_length=128, unique=True, verbose_name='aktivitets ID')),
                ('max_tolerance_in_percent', models.PositiveSmallIntegerField(verbose_name='max tolerance i procent')),
                ('max_tolerance_in_dkk', models.PositiveIntegerField(verbose_name='max tolerance i DKK')),
                ('main_activities', models.ManyToManyField(blank=True, related_name='supplementary_activities', to='core.ActivityDetails', verbose_name='tilladte hovedaktiviteter')),
            ],
            options={
                'verbose_name': 'aktivitetsdetalje',
                'verbose_name_plural': 'aktivitetsdetaljer',
            },
        ),
        migrations.CreateModel(
            name='ApprovalLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='navn')),
            ],
            options={
                'verbose_name': 'bevillingsniveau',
                'verbose_name_plural': 'bevillingsniveauer',
            },
        ),
        migrations.CreateModel(
            name='Case',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('sbsys_id', models.CharField(max_length=128, unique=True, verbose_name='SBSYS-ID')),
                ('cpr_number', models.CharField(max_length=10, verbose_name='cpr-nummer')),
                ('name', models.CharField(max_length=128, verbose_name='navn')),
                ('target_group', models.CharField(choices=[('FAMILY_DEPT', 'familieafdelingen'), ('DISABILITY_DEPT', 'handicapafdelingen')], max_length=128, verbose_name='målgruppe')),
                ('effort_step', models.CharField(choices=[('STEP_ONE', 'Trin 1: Tidlig indsats i almenområdet'), ('STEP_TWO', 'Trin 2: Forebyggelse'), ('STEP_THREE', 'Trin 3: Hjemmebaserede indsatser'), ('STEP_FOUR', 'Trin 4: Anbringelse i slægt eller netværk'), ('STEP_FIVE', 'Trin 5: Anbringelse i forskellige typer af plejefamilier'), ('STEP_SIX', 'Trin 6: Anbringelse i institutionstilbud')], max_length=128, verbose_name='indsatstrappe')),
                ('scaling_step', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], verbose_name='skaleringstrappe')),
                ('assessment_comment', models.TextField(blank=True, verbose_name='supplerende oplysninger til vurdering')),
                ('refugee_integration', models.BooleanField(default=False, verbose_name='integrationsindsatsen')),
                ('cross_department_measure', models.BooleanField(default=False, verbose_name='tværgående ungeindsats')),
                ('note', models.TextField(blank=True, verbose_name='note')),
            ],
            options={
                'verbose_name': 'sag',
                'verbose_name_plural': 'sager',
            },
        ),
        migrations.CreateModel(
            name='Municipality',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='navn')),
            ],
            options={
                'verbose_name': 'kommune',
                'verbose_name_plural': 'kommuner',
            },
        ),
        migrations.CreateModel(
            name='PaymentMethodDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tax_card', models.CharField(choices=[('MAIN_CARD', 'Hovedkort'), ('SECONDARY_CARD', 'Bikort')], max_length=128, verbose_name='skattekort')),
            ],
            options={
                'verbose_name': 'betalingsmåde detalje',
                'verbose_name_plural': 'betalingsmåde detaljer',
            },
        ),
        migrations.CreateModel(
            name='SchoolDistrict',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='navn')),
            ],
            options={
                'verbose_name': 'distrikt',
                'verbose_name_plural': 'distrikter',
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paragraph', models.CharField(max_length=128, verbose_name='paragraf')),
                ('text', models.TextField(verbose_name='forklarende tekst')),
                ('allowed_for_family_target_group', models.BooleanField(default=False, verbose_name='tilladt for familieafdelingen')),
                ('allowed_for_disability_target_group', models.BooleanField(default=False, verbose_name='tilladt for handicapafdelingen')),
                ('allowed_for_steps', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('STEP_ONE', 'Trin 1: Tidlig indsats i almenområdet'), ('STEP_TWO', 'Trin 2: Forebyggelse'), ('STEP_THREE', 'Trin 3: Hjemmebaserede indsatser'), ('STEP_FOUR', 'Trin 4: Anbringelse i slægt eller netværk'), ('STEP_FIVE', 'Trin 5: Anbringelse i forskellige typer af plejefamilier'), ('STEP_SIX', 'Trin 6: Anbringelse i institutionstilbud')], max_length=128), size=6, verbose_name='tilladt for trin i indsatstrappen')),
                ('law_text_name', models.CharField(max_length=128, verbose_name='lov tekst navn')),
            ],
            options={
                'verbose_name': 'paragraf',
                'verbose_name_plural': 'paragraffer',
            },
        ),
        migrations.CreateModel(
            name='ServiceProvider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cvr_number', models.CharField(blank=True, max_length=8, verbose_name='cvr-nummer')),
                ('name', models.CharField(max_length=128, verbose_name='navn')),
                ('vat_factor', models.DecimalField(decimal_places=2, default=100.0, max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='momsfaktor')),
            ],
            options={
                'verbose_name': 'leverandør',
                'verbose_name_plural': 'leverandører',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='navn')),
                ('leader', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='managed_teams', to=settings.AUTH_USER_MODEL, verbose_name='leder')),
            ],
        ),
        migrations.CreateModel(
            name='SectionInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kle_number', models.CharField(blank=True, max_length=128, verbose_name='KLE-nummer')),
                ('sbsys_template_id', models.CharField(blank=True, max_length=128, verbose_name='SBSYS skabelon-id')),
                ('activity_details', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.ActivityDetails')),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Section')),
            ],
            options={
                'verbose_name': 'paragraf-info',
                'verbose_name_plural': 'paragraf-info',
            },
        ),
        migrations.CreateModel(
            name='RelatedPerson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relation_type', models.CharField(max_length=128, verbose_name='relation')),
                ('cpr_number', models.CharField(blank=True, max_length=10, verbose_name='cpr-nummer')),
                ('name', models.CharField(max_length=128, verbose_name='navn')),
                ('related_case', models.CharField(blank=True, max_length=128, verbose_name='SBSYS-sag')),
                ('main_case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_persons', to='core.Case', verbose_name='hovedsag')),
            ],
            options={
                'verbose_name': 'relateret person',
                'verbose_name_plural': 'relaterede personer',
            },
        ),
        migrations.CreateModel(
            name='PaymentSchedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipient_type', models.CharField(choices=[('INTERNAL', 'Intern'), ('PERSON', 'Person'), ('COMPANY', 'Firma')], max_length=128, verbose_name='betalingsmodtager')),
                ('recipient_id', models.CharField(max_length=128, verbose_name='ID')),
                ('recipient_name', models.CharField(max_length=128, verbose_name='navn')),
                ('payment_method', models.CharField(choices=[('CASH', 'Udbetaling'), ('SD', 'SD-LØN'), ('INVOICE', 'Faktura'), ('INTERNAL', 'Intern afregning')], max_length=128, verbose_name='betalingsmåde')),
                ('payment_frequency', models.CharField(blank=True, choices=[('DAILY', 'Dagligt'), ('WEEKLY', 'Ugentligt'), ('BIWEEKLY', 'Hver 2. uge'), ('MONTHLY', 'Månedligt')], max_length=128, null=True, verbose_name='betalingsfrekvens')),
                ('payment_day_of_month', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='betales d.')),
                ('payment_type', models.CharField(choices=[('ONE_TIME_PAYMENT', 'Engangsudgift'), ('RUNNING_PAYMENT', 'Fast beløb, løbende'), ('PER_HOUR_PAYMENT', 'Takst pr. time'), ('PER_DAY_PAYMENT', 'Takst pr. døgn'), ('PER_KM_PAYMENT', 'Takst pr. kilometer')], max_length=128, verbose_name='betalingstype')),
                ('payment_units', models.DecimalField(blank=True, decimal_places=2, max_digits=14, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='betalingsenheder')),
                ('payment_amount', models.DecimalField(decimal_places=2, max_digits=14, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='beløb')),
                ('payment_id', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('payment_method_details', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.PaymentMethodDetails', verbose_name='betalingsmåde detalje')),
            ],
            options={
                'verbose_name': 'betalingsplan',
                'verbose_name_plural': 'betalingsplaner',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='betalingsdato')),
                ('recipient_type', models.CharField(choices=[('INTERNAL', 'Intern'), ('PERSON', 'Person'), ('COMPANY', 'Firma')], max_length=128, verbose_name='betalingsmodtager')),
                ('recipient_id', models.CharField(max_length=128, verbose_name='ID')),
                ('recipient_name', models.CharField(max_length=128, verbose_name='Navn')),
                ('payment_method', models.CharField(choices=[('CASH', 'Udbetaling'), ('SD', 'SD-LØN'), ('INVOICE', 'Faktura'), ('INTERNAL', 'Intern afregning')], max_length=128, verbose_name='betalingsmåde')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=14, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='beløb')),
                ('paid', models.BooleanField(default=False, verbose_name='betalt')),
                ('payment_schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='core.PaymentSchedule', verbose_name='betalingsplan')),
            ],
            options={
                'verbose_name': 'betaling',
                'verbose_name_plural': 'betalinger',
            },
        ),
        migrations.CreateModel(
            name='HistoricalCase',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('effort_step', models.CharField(choices=[('STEP_ONE', 'Trin 1: Tidlig indsats i almenområdet'), ('STEP_TWO', 'Trin 2: Forebyggelse'), ('STEP_THREE', 'Trin 3: Hjemmebaserede indsatser'), ('STEP_FOUR', 'Trin 4: Anbringelse i slægt eller netværk'), ('STEP_FIVE', 'Trin 5: Anbringelse i forskellige typer af plejefamilier'), ('STEP_SIX', 'Trin 6: Anbringelse i institutionstilbud')], max_length=128, verbose_name='indsatstrappe')),
                ('scaling_step', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], verbose_name='skaleringstrappe')),
                ('assessment_comment', models.TextField(blank=True, verbose_name='supplerende oplysninger til vurdering')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('case_worker', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='sagsbehandler')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('team', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.Team', verbose_name='team')),
            ],
            options={
                'verbose_name': 'historical sag',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='case',
            name='acting_municipality',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='acts_on', to='core.Municipality', verbose_name='handlekommune'),
        ),
        migrations.AddField(
            model_name='case',
            name='case_worker',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='cases', to=settings.AUTH_USER_MODEL, verbose_name='sagsbehandler'),
        ),
        migrations.AddField(
            model_name='case',
            name='district',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='cases', to='core.SchoolDistrict', verbose_name='skoledistrikt'),
        ),
        migrations.AddField(
            model_name='case',
            name='paying_municipality',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='pays_for', to='core.Municipality', verbose_name='betalingskommune'),
        ),
        migrations.AddField(
            model_name='case',
            name='residence_municipality',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='resident_clients', to='core.Municipality', verbose_name='bopælskommune'),
        ),
        migrations.AddField(
            model_name='case',
            name='team',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='cases', to='core.Team', verbose_name='team'),
        ),
        migrations.CreateModel(
            name='Appropriation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('sbsys_id', models.CharField(max_length=128, unique=True, verbose_name='SBSYS-ID')),
                ('note', models.TextField(blank=True, verbose_name='supplerende oplysninger')),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appropriations', to='core.Case', verbose_name='sag')),
                ('section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='appropriations', to='core.Section', verbose_name='paragraf')),
            ],
            options={
                'verbose_name': 'bevilling',
                'verbose_name_plural': 'bevillinger',
            },
        ),
        migrations.AddField(
            model_name='activitydetails',
            name='main_activity_for',
            field=models.ManyToManyField(blank=True, related_name='main_activities', through='core.SectionInfo', to='core.Section', verbose_name='hovedaktivitet for paragraffer'),
        ),
        migrations.AddField(
            model_name='activitydetails',
            name='service_providers',
            field=models.ManyToManyField(blank=True, related_name='supplied_activities', to='core.ServiceProvider', verbose_name='leverandører'),
        ),
        migrations.AddField(
            model_name='activitydetails',
            name='supplementary_activity_for',
            field=models.ManyToManyField(blank=True, related_name='supplementary_activities', to='core.Section', verbose_name='følgeudgift for paragraffer'),
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('status', models.CharField(choices=[('DRAFT', 'kladde'), ('EXPECTED', 'forventet'), ('GRANTED', 'bevilget')], max_length=128, verbose_name='status')),
                ('approval_note', models.TextField(blank=True, verbose_name='evt. bemærkning')),
                ('appropriation_date', models.DateField(blank=True, null=True, verbose_name='bevillingsdato')),
                ('start_date', models.DateField(verbose_name='startdato')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='slutdato')),
                ('activity_type', models.CharField(choices=[('MAIN_ACTIVITY', 'hovedaktivitet'), ('SUPPL_ACTIVITY', 'følgeaktivitet')], max_length=128, verbose_name='type')),
                ('note', models.TextField(blank=True, max_length=1000, null=True)),
                ('appropriation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='core.Appropriation', verbose_name='bevilling')),
                ('approval_level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_activities', to='core.ApprovalLevel', verbose_name='bevillingsniveau')),
                ('approval_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='approved_activities', to=settings.AUTH_USER_MODEL, verbose_name='bevilget af bruger')),
                ('details', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.ActivityDetails', verbose_name='aktivitetsdetalje')),
                ('modifies', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='modified_by', to='core.Activity')),
                ('payment_plan', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.PaymentSchedule', verbose_name='betalingsplan')),
                ('service_provider', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='activities', to='core.ServiceProvider', verbose_name='leverandør')),
            ],
            options={
                'verbose_name': 'aktivitet',
                'verbose_name_plural': 'aktiviteter',
            },
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=128, verbose_name='konteringsnummer')),
                ('main_activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='main_accounts', to='core.ActivityDetails', verbose_name='hovedaktivitet')),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accounts', to='core.Section', verbose_name='paragraf')),
                ('supplementary_activity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='supplementary_accounts', to='core.ActivityDetails', verbose_name='følgeudgift')),
            ],
            options={
                'verbose_name': 'konto',
                'verbose_name_plural': 'konti',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='team',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='users', to='core.Team'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddConstraint(
            model_name='activity',
            constraint=models.CheckConstraint(check=models.Q(start_date__lte=django.db.models.expressions.F('end_date')), name='end_date_after_start_date'),
        ),
        migrations.AddConstraint(
            model_name='activity',
            constraint=models.UniqueConstraint(condition=models.Q(('activity_type', 'MAIN_ACTIVITY'), ('modifies__isnull', True)), fields=('appropriation',), name='unique_main_activity'),
        ),
        migrations.AddConstraint(
            model_name='account',
            constraint=models.UniqueConstraint(fields=('main_activity', 'supplementary_activity', 'section'), name='unique_account_number'),
        ),
    ]
