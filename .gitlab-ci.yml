# Copyright (C) 2019 Magenta ApS, http://magenta.dk.
# Contact: info@magenta.dk.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

################################################################################
# Changes to this file requires approval from Labs. Please add a person from   #
# Labs as required approval to your MR if you have any changes.                #
################################################################################

# For `docker push` to work, the following envionment variables have to set in
# the Gitlab UI.
# RELEASE_REGISTRY_USER
# RELEASE_REGISTRY_PASSWORD

stages:
  - lint
  # build stage is not blocked by lint stage, as we have a DAG:
  # https://docs.gitlab.com/ee/ci/directed_acyclic_graph/index.html
  - build
  - test
  - release
  - deploy

include:
  - project: 'labs/master-ci'
    ref: master
    file: '/project/docker.yml'

variables:
  # Project variables
  RELEASE_REGISTRY: docker.io
  RELEASE_REGISTRY_IMAGE: index.docker.io/magentaaps/bevillingsplatform

  IMAGE_SHA: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
  IMAGE_DEV: ${CI_REGISTRY_IMAGE}:dev

  IMAGE: magentaaps/bevillingsplatform
  IMAGE_TAG: ${IMAGE}:${CI_COMMIT_TAG}
  IMAGE_LATEST: ${IMAGE}:latest


# Lint stage
#############

.lint-default: &lint-default
  stage: lint
  needs: []
  image: python:3.7
  tags:
    - docker

Lint Python:
  <<: *lint-default
  before_script:
    - pip3 install -r backend/requirements-test.txt
  script:
    - cd backend
    - black --check --diff .
    - flake8 .
    - pydocstyle .

Lint shell scripts:
  <<: *lint-default
  image: koalaman/shellcheck-alpine:latest
  before_script:
    - apk update
    - apk add git
  script:
    - git ls-files --exclude='*.sh' --ignored | xargs shellcheck

Lint Dockerfiles:
  <<: *lint-default
  image: hadolint/hadolint:latest-debian
  before_script:
    - apt-get -y update
    - apt-get -y install --no-install-recommends git
  script:
    - git ls-files --exclude='Dockerfile*' --ignored | xargs --max-lines=1 hadolint


# Build stage
#############

Build docs:
  stage: build
  needs: []
  image: python:3.7
  tags:
    - docker
  before_script:
    - pip3 install -r backend/requirements-test.txt
    - pip3 install -r backend/requirements.txt
    - apt-get update && apt-get install npm -y && npm install -g jsdoc
  script:
    - sphinx-build docs/source doc-build
  artifacts:
    paths:
      - doc-build

Build app image:
  stage: build
  needs: []
  dependencies: []
  tags:
    - docker
    - privileged
  before_script:
    # Login to GitLab registry
    - echo ${CI_REGISTRY_PASSWORD} | docker login -u ${CI_REGISTRY_USER} --password-stdin ${CI_REGISTRY}
    - docker pull ${IMAGE_DEV} || true
  script:
    - docker build -f docker/Dockerfile --pull --tag ${IMAGE_SHA} --cache-from ${IMAGE_DEV} .
    - docker push ${IMAGE_SHA}


# Test stage
############


Unittest:
  stage: test
  needs: ["Build app image"]
  image:
    name: ${IMAGE_SHA}
  tags:
    - docker
  services:
    - name: postgres:11
      alias: db
  dependencies: []
  variables:
    POSTGRES_USER: bev
    POSTGRES_PASSWORD: bev
    BEV_USER_CONFIG_PATH: $CI_PROJECT_DIR/dev-environment/dev-settings.ini
    COVERAGE_FILE: $CI_PROJECT_DIR/.coverage
  script:
    - cd /code/backend &&
      pytest
      --cov=core
      --cov=bevillingsplatform
      --cov=core.management.commands
      --junitxml $CI_PROJECT_DIR/junit.xml
      --cov-report html:$CI_PROJECT_DIR/coverage-html
      --cov-report term
      --cov-fail-under=100
      -p no:cacheprovider

  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/coverage-html
    reports:
      junit: $CI_PROJECT_DIR/junit.xml


.integration-test:
  stage: test
  needs: ["Build app image"]
  # TODO when you implement integration tests in ci, remember to add it to the
  # `needs` array for ".release-default".
  tags:
    - docker
  before_script:
    # Login to GitLab registry
    - echo ${CI_REGISTRY_PASSWORD} | docker login -u ${CI_REGISTRY_USER} --password-stdin ${CI_REGISTRY}
    - docker pull ${IMAGE_SHA}
  script:
    - # TODO run tests


# Release stage
###############

.release-default: &release-default
  stage: release
  needs: ["Unittest"]
  image: docker:19.03.1
  variables:
    GIT_STRATEGY: none # We do not need the source code
  dependencies: []
  tags:
    - docker
    - privileged
  before_script:
    # Login to GitLab registry
    - echo ${CI_REGISTRY_PASSWORD} | docker login -u ${CI_REGISTRY_USER} --password-stdin ${CI_REGISTRY}
    - docker pull ${IMAGE_SHA}


Release dev:
  <<: *release-default
  only:
    refs:
      - develop
  script:
    - docker tag ${IMAGE_SHA} ${IMAGE_DEV}
    - docker push ${IMAGE_DEV}


Release rc:
  <<: *release-default
  only:
    variables:
      # Matches all of SemVer 2.0.0
      - $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
  script:
    # Login to Docker Hub registry
    - echo ${RELEASE_REGISTRY_PASSWORD} | docker login -u ${RELEASE_REGISTRY_USER} --password-stdin ${RELEASE_REGISTRY}
    - echo Tagging with ${IMAGE_TAG}
    - docker tag ${IMAGE_SHA} ${IMAGE_TAG}
    - docker push ${IMAGE_TAG}

Release master:
  <<: *release-default
  only:
    variables:
      # Matches <version core> from SemVer 2.0.0 BNF grammar. Ex. 2.3.4, but not 2.3.4-rc
      - $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/
  script:
    # Login to Docker Hub registry
    - echo ${RELEASE_REGISTRY_PASSWORD} | docker login -u ${RELEASE_REGISTRY_USER} --password-stdin ${RELEASE_REGISTRY}
    - echo Tagging with ${IMAGE_TAG}
    - docker tag ${IMAGE_SHA} ${IMAGE_TAG}
    - echo Tagging with ${IMAGE_LATEST}
    - docker tag ${IMAGE_SHA} ${IMAGE_LATEST}
    - docker push ${IMAGE_TAG}
    - docker push ${IMAGE_LATEST}


# Deploy stage
##############

.deploy-default: &deploy-default
  stage: deploy
  image: magentalabs/pepper:latest
  services: []
  dependencies: []
  tags:
    - deploy


deploy-dev:
  <<: *deploy-default
  needs: ["Release dev"]
  only:
    refs:
      - develop
  variables:
    DEPLOYMENT_NAMESPACE: cbur.magenta.test
    SALTAPI_URL: https://ctrldev1.magenta-aps.dk/api/
    SALTAPI_EAUTH: file
    GIT_STRATEGY: none
  script:
    - echo Attempting to call deployment
    - pepper --client runner --fail-any-none state.orchestrate ${DEPLOYMENT_NAMESPACE}
  environment:
    name: develop
    url: https://cburtest.magenta.dk

.deploy-rc:
  <<: *deploy-default
  needs: ["Release rc"]
  only:
    - /release/.*/
  script:
    - echo Deploying ${IMAGE_RC} to moratest.magneta.dk
    # TODO: push ${IMAGE_RC} to moratest.magneta.dk


.deploy-master:
  <<: *deploy-default
  needs: ["Release master"]
  only:
    - tags
  script:
    echo Deploying ${IMAGE_LATEST} to morademo.magneta.dk
    # TODO: push ${IMAGE_LATEST} to morademo.magneta.dk
